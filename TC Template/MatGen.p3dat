; ===========================================================================================================
; FILE: MatGen.p3dat
; INFO: Generate initial sample in a box                                                wanghao 2022.04.11
; ===========================================================================================================
model domain extent [-mL] [mL] [-mW] [mW] [-mH] [mH] condition destroy

contact cmat default model rrlinear method deform emod [emod] kratio [mu]

wall generate name 'Vessel' box [-wL] [wL] [-wW] [wW] [-wH] [wH] expand 1.2
; --------------------------------------------------------------------------
; set the default size distribution, using volume fraction
@granulometry
; --------------------------------------------------------------------------
; create a ball cloud with arbitrary overlap using the distribute command
[bNb  = table.size(sizeTab)] ; bNb  - number of bins
ball distribute box [-wL] [wL] [-wW] [wW] [-wH] [wH] ...
            porosity [bN]     ...
            resolution [bRes] ...
            number-bins [bNb] ...
            bin 1                                                         ...
                radius [0.5*dmin] [0.5*table.x(sizeTab,1)]                ...
                volume-fraction [table.y(sizeTab,1)]                      ...
            bin 2                                                         ...
                radius [0.5*table.x(sizeTab,1)] [0.5*table.x(sizeTab,2)]  ...
                volume-fraction [table.y(sizeTab,2) -table.y(sizeTab,1)]  ...
            bin 3                                                         ...
                radius [0.5*table.x(sizeTab,2)] [0.5*table.x(sizeTab,3)]  ...
                volume-fraction [table.y(sizeTab,3) -table.y(sizeTab,2)]  ...
            bin 4                                                         ...
                radius [0.5*table.x(sizeTab,3)] [0.5*table.x(sizeTab,4)]  ...
                volume-fraction [table.y(sizeTab,4) -table.y(sizeTab,3)]  ...
            bin 5                                                         ...
                radius [0.5*table.x(sizeTab,4)] [0.5*table.x(sizeTab,5)]  ...
                volume-fraction [table.y(sizeTab,5) -table.y(sizeTab,4)]  ...
            bin 6                                                         ...
                radius [0.5*table.x(sizeTab,5)] [0.5*table.x(sizeTab,6)]  ...
                volume-fraction [table.y(sizeTab,6) -table.y(sizeTab,5)]  ...
            bin 7                                                         ...
                radius [0.5*table.x(sizeTab,6)] [0.5*table.x(sizeTab,7)]  ...
                volume-fraction [table.y(sizeTab,7) -table.y(sizeTab,6)]
ball group 'sands'
ball attribute density [bDen] damp [bDamp] range group 'sands'
model cycle 1000 calm 100

wall servo activate on gain-f [g_f] gain-u [g_u] v-m [g_v] force-z [ g_s * wL * wW * 4] range name 'VesselBottom' 
wall servo activate on gain-f [g_f] gain-u [g_u] v-m [g_v] force-z [-g_s * wL * wW * 4] range name 'VesselTop' 
wall servo activate on gain-f [g_f] gain-u [g_u] v-m [g_v] force-x [ g_s * wH * wW * 4] range name 'VesselLeft' 
wall servo activate on gain-f [g_f] gain-u [g_u] v-m [g_v] force-x [-g_s * wH * wW * 4] range name 'VesselRight' 
wall servo activate on gain-f [g_f] gain-u [g_u] v-m [g_v] force-y [ g_s * wL * wH * 4] range name 'VesselFront' 
wall servo activate on gain-f [g_f] gain-u [g_u] v-m [g_v] force-y [-g_s * wL * wH * 4] range name 'VesselBack' 

[mR = wW]
measure create id 1 radius [mR] position 0 0 0
measure history id 1 stress-xx id 1
measure history id 2 stress-yy id 1
measure history id 3 stress-zz id 1
[m1 = measure.find(1)]
; --------------------------------------------------------------------------
; size distribution monitoring
measure create id 2 radius [mR] bins 100 @dmin [table.x(sizeTab, bNb)] position 0 0 0
measure dump id 2 table 'Numerical'

def servo_wall_halt
    local mAvg = (measure.stress.xx(m1) + measure.stress.yy(m1) + measure.stress.zz(m1)) / 3
    if math.abs(mAvg + g_s) / g_s < g_e then
        servo_wall_halt = 1
    endif
end

model solve fishhalt @servo_wall_halt
model cycle 1000
model calm

wall servo activate false
model save [save_dir + 'ini.sav']
; ===========================================================================================================
; EOF: MatGen.p3dat